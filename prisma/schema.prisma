// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

model User {
  id           String                  @id @default(cuid())
  name         String
  email        String                  @unique
  password     String
  role         String
  created_at   DateTime                @default(now())
  appointments AppointmentTechnician[]
}

model ServiceFields {
  id        Int     @id @default(autoincrement())
  serviceId Int
  name      String
  value     String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Customer {
  id          String        @id @default(cuid())
  name        String
  email       String        @unique
  phone       String        @unique
  vehicles    Vehicle[]
  Appointment Appointment[]
}

model Vehicle {
  id         Int      @id @default(autoincrement())
  make       String
  model      String
  year       String
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  Appointment Appointment[]
}

model Appointment {
  id                 Int                     @id @default(autoincrement())
  date               DateTime
  time               String
  vehicle_id         Int?
  appointment_type   String?
  status             String                  @default("pending")
  note               String                  @default("")
  payment_status     String                  @default("unpaid")
  payment_method     String                  @default("cash")
  customerid         String
  ServiceAppointment ServiceIdQty[]
  technicians        AppointmentTechnician[]
  vehicle            Vehicle?                @relation(fields: [vehicle_id], references: [id], onDelete: SetNull)
  customer           Customer                @relation(fields: [customerid], references: [id], onDelete: Cascade)
}

model AppointmentTechnician {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  technicianId  String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  technician    User        @relation(fields: [technicianId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, technicianId])
}

model ServiceIdQty {
  id            String      @id @default(uuid())
  appointmentId Int
  qty           String
  serviceId     Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Service {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  name         String
  price        Float
  fields       ServiceFields[]
  ServiceIdQty ServiceIdQty[]
}
