// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

model User {
  id         String              @id @default(cuid())
  name       String
  email      String              @unique
  password   String
  role       String
  created_at DateTime            @default(now())
  bookings   BookingTechnician[]
}

model ServiceFields {
  id        Int     @id @default(autoincrement())
  serviceId Int
  name      String
  value     String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Customer {
  id       String    @id @default(cuid())
  name     String
  email    String    @unique
  phone    String    @unique
  vehicles Vehicle[]
  bookings Booking[]
}

model Vehicle {
  id         Int      @id @default(autoincrement())
  make       String
  model      String
  year       String
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  bookings Booking[]
}

model Booking {
  id             Int                 @id @default(autoincrement())
  date           DateTime
  time           String
  ramp           String?
  vehicle_id     Int?
  booking_type   String?
  status         String              @default("pending")
  note           String              @default("")
  payment_status String              @default("unpaid")
  payment_method String              @default("cash")
  customerid     String
  services       ServiceIdQty[]
  technicians    BookingTechnician[]
  vehicle        Vehicle?            @relation(fields: [vehicle_id], references: [id], onDelete: SetNull)
  customer       Customer            @relation(fields: [customerid], references: [id], onDelete: Cascade)
}

model BookingTechnician {
  id           Int     @id @default(autoincrement())
  bookingId    Int
  technicianId String
  booking      Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  technician   User    @relation(fields: [technicianId], references: [id], onDelete: Cascade)

  @@unique([bookingId, technicianId])
}

model ServiceIdQty {
  id        String  @id @default(uuid())
  bookingId Int
  qty       String
  serviceId Int
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Service {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  name         String
  price        Float
  fields       ServiceFields[]
  ServiceIdQty ServiceIdQty[]
  
}

model Part {
  id                 Int                    @id @default(autoincrement())
  partNumber         String                 @unique
  name               String
  description        String?
  category           Category               @relation(fields: [categoryId], references: [id])
  categoryId         Int
  unitCost           Float
  retailPrice        Float
  quantityOnHand     Int                    @default(0)
  location           String? // e.g., "Shelf A, Bin 3"
  reorderPoint       Int?
  supplier           Supplier               @relation(fields: [supplierId], references: [id])
  supplierId         Int
  compatibleVehicles Json? // Store vehicle compatibility info (make, model, year) as JSON
  transactions       InventoryTransaction[]

  
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  parts Part[]
}

model Supplier {
  id        Int     @id @default(autoincrement())
  name      String
  contact   Contact @relation(fields: [contactId], references: [id])
  contactId Int     @unique
  parts     Part[]
}

model Contact {
  id       Int       @id @default(autoincrement())
  phone    String
  email    String
  address  String?
  supplier Supplier?
}

model InventoryTransaction {
  id              Int      @id @default(autoincrement())
  date            DateTime @default(now())
  type            String // e.g., "receipt", "sale", "adjustment"
  partId          Int
  part            Part     @relation(fields: [partId], references: [id])
  quantity        Int
  referenceNumber String? // Invoice/Work Order number
  cost            Float? // Cost at the time of the transaction
  notes           String?
}
